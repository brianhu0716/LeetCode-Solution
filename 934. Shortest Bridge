class Solution:
    def shortestBridge(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        def dfs(i, j):
            for x, y in ((i - 1, j), (i + 1, j), (i, j + 1), (i, j - 1)):
                if (0 <= x < m) and (0 <= y < n) and grid[x][y] == 1:
                    grid[x][y] = 2
                    dq.append((x, y))
                    dfs(x, y)
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    grid[i][j] = 2
                    dq = deque([(i, j)])
                    dfs(i, j) # use dfs to search first island and save the coordinates in dq
                    node= 0
                    while dq: # use bfs to find the minimum path to touch the second island
                        for _ in range(len(dq)):
                            i, j = dq.popleft()
                            for x, y in ((i - 1, j), (i + 1, j), (i, j + 1), (i, j - 1)):
                                if (0 <= x < m) and (0 <= y < n):
                                    if grid[x][y] == 0:
                                        grid[x][y] = 2
                                        dq.append((x, y))
                                    if grid[x][y] == 1:
                                        return node
                        node += 1